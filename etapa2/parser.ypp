// Julia Mombach da Silva
// Compiladores - etapa 2

%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string>
    using namespace std;
    int getLineNumber();

    int yylex();
    void yyerror(string msg);
%}

%token KW_BYTE
%token KW_INT
%token KW_REAL
 
%token KW_IF
%token KW_ELSE
%token KW_DO
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN
 
%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_EQ
%token OPERATOR_DIF
 
%token TK_IDENTIFIER
 
%token LIT_INT
%token LIT_CHAR
%token LIT_REAL
%token LIT_STRING

%token TOKEN_ERROR

%left '<' '>' OPERATOR_DIF OPERATOR_EQ OPERATOR_GE OPERATOR_LE
%left '='
%left '+' '-'
%left '*' '/'
%left '&' '~' '|'


%start program

%%

program         :   ldef
                ;

ldef            :   def ldef
                |
                ;

def             :   type TK_IDENTIFIER '=' literal ';'
                |   type TK_IDENTIFIER '[' LIT_INT ']' vector_init ';'
                |   type TK_IDENTIFIER '(' function_init ')' command_block
                ;

type            :   KW_INT
                |   KW_BYTE
                |   KW_REAL
                ;

literal         :   LIT_INT
                |   LIT_CHAR
                |   LIT_REAL
                ;

vector_init     :   
                |   '=' literal vector_lits
                ;

vector_lits     :
                |   ',' literal vector_lits
                ;

function_init   :
                |   type TK_IDENTIFIER function_init2
                ;

function_init2  :
                |   ',' type TK_IDENTIFIER function_init2
                ;

command_block   :   '{' command_list '}'
                ;

command_list    : 
                |   command command_list
                ;

command         :   command_block
                |   TK_IDENTIFIER '=' expression ';'
                |   TK_IDENTIFIER '[' expression ']' '=' expression ';'
                |   KW_READ TK_IDENTIFIER ';'
                |   KW_PRINT print ';'
                |   KW_RETURN expression ';'
                |   KW_IF '(' expression ')' command
                |   KW_IF '(' expression ')' command KW_ELSE command
                |   KW_WHILE expression KW_DO command
                |   KW_DO command KW_WHILE expression ';'
                |   ';'
                ;

expression      :   TK_IDENTIFIER
                |   TK_IDENTIFIER '[' expression ']'
                |   literal
                |   expression '+' expression
                |   expression '-' expression
                |   expression '*' expression
                |   expression '/' expression
                |   expression '<' expression
                |   expression '>' expression
                |   expression '&' expression
                |   expression '|' expression
                |   expression '~' expression
                |   expression OPERATOR_DIF expression
                |   expression OPERATOR_EQ expression
                |   expression OPERATOR_GE expression
                |   expression OPERATOR_LE expression
                |   '(' expression ')'
                |   TK_IDENTIFIER '(' function_args ')'
                ;

function_args   :   
                |   expression function_args2
                ;

function_args2  : 
                |   ',' expression function_args2
                ;

print           :   LIT_STRING print2
                |   expression print2
                ;

print2          :   
                |   LIT_STRING print2
                |   expression print2
                ;

%%

void yyerror(string msg){
    fprintf(stderr, "Erro de sintaxe na linha %d\n", getLineNumber());
    exit(3);
}